import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile

from db import db
from admin import setup_admin_router

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '7243978024:AAG41V9EMPrJ4HZntWQfTVGskLjOEDo5BZM'

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)
user_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–∞
class PaymentStates(StatesGroup):
    WAITING_RECEIPT = State()


setup_admin_router(dp)
dp.include_router(user_router)


def create_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    buttons = [
        ("üì¶ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", "about_shop"),
        ("üí≥ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –°–ë–ü", "sbp_categories"),
        ("üì¶ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "operator_categories"),
        ("üéÅ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏", "promotions"),
        ("üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support")
    ]
    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)
    builder.adjust(1)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 1 –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def create_back_button():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    return builder.as_markup()


def create_back_to_products_button(category_id, section_type):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"{section_type}_category_{category_id}")
    return builder.as_markup()


def create_sbp_payment_keyboard(product_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞", callback_data=f"send_receipt_{product_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="sbp_category_back")
    builder.adjust(1)
    return builder.as_markup()


def create_close_request_keyboard(order_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"close_request_{order_id}")
    return builder.as_markup()


@user_router.message(Command('start'))
async def send_welcome(message: types.Message):
    user_name = message.from_user.first_name
    reply_markup = create_main_menu_keyboard()
    welcome_text = f"""
‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b> ‚ú®
üè™ <i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ!</i>
üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:</b>
    """
    if db.is_admin(message.from_user.id):
        welcome_text += "\n\nüëë <i>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>"
    await message.answer(welcome_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


@user_router.callback_query()
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    callback_data = callback_query.data
    if callback_data.startswith('admin_'):
        logger.info(f"Admin callback received, skipping user handler: {callback_data}")
        return
    if callback_data == 'sbp_category_back':
        await show_categories(callback_query, 'sbp')
        return
    if callback_data == 'operator_categories':
        await show_categories(callback_query, 'operator')
        return
    if callback_data == 'sbp_categories':
        await show_categories(callback_query, 'sbp')
        return
    if callback_data.startswith('send_receipt_'):
        product_id = int(callback_data.split('_')[2])
        await process_receipt_request(callback_query, product_id, state)
        return
    if callback_data.startswith('operator_category_'):
        category_id = int(callback_data.split('_')[2])
        await show_products(callback_query, category_id, 'operator')
        return
    if callback_data.startswith('sbp_category_'):
        category_id = int(callback_data.split('_')[2])
        await show_products(callback_query, category_id, 'sbp')
        return
    if callback_data.startswith('operator_product_'):
        product_id = int(callback_data.split('_')[2])
        await show_product_details(callback_query, product_id, 'operator')
        return
    if callback_data.startswith('sbp_product_'):
        product_id = int(callback_data.split('_')[2])
        await show_product_details(callback_query, product_id, 'sbp')
        return
    if callback_data in ['about_shop', 'promotions']:
        content = db.get_section_content(callback_data)
        photo_path = db.get_section_photo(callback_data)
        if content:
            if photo_path:
                try:
                    await callback_query.message.answer_photo(
                        FSInputFile(photo_path),
                        caption=content,
                        parse_mode=ParseMode.HTML,
                        reply_markup=create_back_button()
                    )
                    await callback_query.message.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    await callback_query.message.answer(
                        content,
                        parse_mode=ParseMode.HTML,
                        reply_markup=create_back_button()
                    )
            else:
                await callback_query.message.answer(
                    content,
                    parse_mode=ParseMode.HTML,
                    reply_markup=create_back_button()
                )
            await callback_query.answer()
            return
    if callback_data == 'support':
        text = """
üõü <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @sssofbot13
        """
        reply_markup = create_back_button()
    elif callback_data == 'back_to_main':
        text = "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:</b>"
        reply_markup = create_main_menu_keyboard()
        try:
            await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        except:
            await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        await callback_query.answer()
        return
    elif callback_data.startswith('close_request_'):
        await close_request_handler(callback_query)
        return
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        reply_markup = create_back_button()

    try:
        await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    except:
        try:
            await callback_query.message.delete()
        except:
            pass
        await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    await callback_query.answer()


async def show_categories(callback_query: types.CallbackQuery, section_type: str):
    categories = db.get_categories_by_section(section_type)
    section_name = "–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" if section_type == 'operator' else "–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –°–ë–ü"
    if not categories:
        text = f"üì¶ <b>{section_name}</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
        reply_markup = create_back_button()
        try:
            await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        except:
            await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    else:
        text = f"üì¶ <b>{section_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        keyboard = InlineKeyboardBuilder()
        for category in categories:
            products_count = len(db.get_products_by_category_and_section(category['id'], section_type))
            keyboard.button(text=f"{category['name']} ({products_count} —Ç–æ–≤–∞—Ä–æ–≤)",
                            callback_data=f"{section_type}_category_{category['id']}")
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard.adjust(1)
        try:
            await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.as_markup())
        except:
            await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.as_markup())
    await callback_query.answer()


async def show_products(callback_query: types.CallbackQuery, category_id: int, section_type: str):
    category = db.get_category_by_id(category_id)
    section_name = "–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" if section_type == 'operator' else "–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –°–ë–ü"
    if category:
        products = db.get_products_by_category_and_section(category_id, section_type)
        if not products:
            text = f"üì¶ <b>{category['name']}</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"{section_type}_categories")
            try:
                await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML,
                                                       reply_markup=keyboard.as_markup())
            except:
                await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.as_markup())
        else:
            text = f"üì¶ <b>{category['name']}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
            keyboard = InlineKeyboardBuilder()
            for product in products:
                if section_type == 'operator':
                    keyboard.button(text=f"{product['name']} - {product['price']} —Ä—É–±.",
                                    callback_data=f"{section_type}_product_{product['id']}")
                else:
                    keyboard.button(text=f"{product['name']} - {product['stars_price']} —Ä—É–±.",
                                    callback_data=f"{section_type}_product_{product['id']}")
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"{section_type}_categories")
            keyboard.adjust(1)
            try:
                await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML,
                                                       reply_markup=keyboard.as_markup())
            except:
                await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.as_markup())
    else:
        await callback_query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await callback_query.answer()


async def show_product_details(callback_query: types.CallbackQuery, product_id: int, section_type: str):
    product = db.get_product_by_id(product_id)
    if product:
        category = db.get_category_by_id(product['category_id'])
        if section_type == 'operator':
            text = f"üõí <b>{product['name']}</b>\n\n{product['description']}\n\nüíµ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name'] if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\nüì∏ <b>–î–ª—è –ø–æ–∫—É–ø–∫–∏:</b>\n1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ @sssofbot13"
            reply_markup = create_back_to_products_button(product['category_id'], section_type)
        else:
            payment_details = """
üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü</b>

–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{amount} —Ä—É–±.</b> –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:

üìû <b>+79955478027</b>
üîµ –û–∑–æ–Ω –ë–∞–Ω–∫ (–õ—É—á—à–µ —Å—é–¥–∞)  
üîµ –í–¢–ë –ë–∞–Ω–∫
üü¢ –°–±–µ—Ä
üü° –¢-–ë–∞–Ω–∫ 
üî¥ –ê–ª—å—Ñ–∞ 
üü£ –Ø–Ω–¥–µ–∫—Å 
üë§ <b>–°–æ—Ñ—å—è –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–Ω–∞ –ú.</b>

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞"
""".format(amount=product['stars_price'])

            text = f"üí≥ <b>{product['name']}</b>\n\n{product['description']}\n\nüí´ –¶–µ–Ω–∞: {product['stars_price']} —Ä—É–±.\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name'] if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n{payment_details}"
            reply_markup = create_sbp_payment_keyboard(product_id)
        try:
            await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        except:
            await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    else:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback_query.answer()


async def process_receipt_request(callback_query: types.CallbackQuery, product_id: int, state: FSMContext):
    product = db.get_product_by_id(product_id)

    if product:
        await state.set_state(PaymentStates.WAITING_RECEIPT)
        await state.update_data(product_id=product_id)
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.")
    else:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback_query.answer()


@user_router.message(PaymentStates.WAITING_RECEIPT, F.photo)
async def handle_receipt_photo(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    product_id = user_data.get('product_id')
    product = db.get_product_by_id(product_id)

    if product:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —á–µ–∫–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("receipts", exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        photo_filename = f"receipts/{message.from_user.id}_{message.message_id}.jpg"
        await bot.download_file(file_path, photo_filename)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = message.from_user.username
        if username:
            user_display = f"@{username}"
        else:
            user_display = f"{message.from_user.first_name} (ID: {message.from_user.id})"

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = db.create_order(
            user_id=message.from_user.id,
            username=user_display,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
            product_id=product_id,
            amount=product['stars_price'],
            photo_path=photo_filename,
            status='pending'
        )

        if not order_id:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = db.get_category_by_id(product['category_id'])
        category_name = category['name'] if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞ –∞–¥–º–∏–Ω–∞–º
        admin_ids = [785219206, 1927067668]  # ID –∞–¥–º–∏–Ω–æ–≤
        for admin_id in admin_ids:
            try:
                caption = (
                    f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
                    f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                    f"üõí –¢–æ–≤–∞—Ä: {product['name']}\n"
                    f"üíµ –°—É–º–º–∞: {product['stars_price']} —Ä—É–±.\n"
                    f"üïí –í—Ä–µ–º—è: {message.date.strftime('%Y-%m-%d %H:%M:%S')}"
                )

                await bot.send_photo(
                    chat_id=admin_id,
                    photo=FSInputFile(photo_filename),
                    caption=caption,
                    reply_markup=create_close_request_keyboard(order_id)
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç @sssofbot13‚ò∫Ô∏è")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()


@user_router.message(PaymentStates.WAITING_RECEIPT)
async def handle_wrong_receipt(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.")


async def close_request_handler(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split('_')[2])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    order = db.get_order_by_id(order_id)
    if not order:
        await callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'closed' –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
    if db.update_order_status(order_id, 'closed'):
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
        await callback_query.message.delete()
        await callback_query.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏")


@user_router.message()
async def handle_text(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É üëá",
                         reply_markup=create_main_menu_keyboard())


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
