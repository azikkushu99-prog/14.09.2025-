import logging
import asyncio
import uuid
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from db import db
from admin import setup_admin_router

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '7243978024:AAG41V9EMPrJ4HZntWQfTVGskLjOEDo5BZM'

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)
user_router = Router()

setup_admin_router(dp)
dp.include_router(user_router)


def create_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    buttons = [
        ("üì¶ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "operator_categories"),
        ("‚≠ê –ü–æ–∫—É–ø–∫–∞ –∑–∞ –∑–≤–µ–∑–¥—ã", "stars_categories"),
        ("üè™ –û –º–∞–≥–∞–∑–∏–Ω–µ", "about_shop"),
        ("üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support"),
        ("üéÅ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏", "promotions")
    ]
    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)
    builder.adjust(2)
    return builder.as_markup()


def create_back_button():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    return builder.as_markup()


def create_back_to_products_button(category_id, section_type):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"{section_type}_category_{category_id}")
    return builder.as_markup()


def create_stars_payment_keyboard(product_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚≠ê –ö—É–ø–∏—Ç—å –∑–∞ –∑–≤–µ–∑–¥—ã", callback_data=f"buy_with_stars_{product_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="stars_category_back")
    builder.adjust(1)
    return builder.as_markup()


@user_router.message(Command('start'))
async def send_welcome(message: types.Message):
    user_name = message.from_user.first_name
    reply_markup = create_main_menu_keyboard()
    welcome_text = f"""
‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b> ‚ú®
üè™ <i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ!</i>
üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:</b>
    """
    if db.is_admin(message.from_user.id):
        welcome_text += "\n\nüëë <i>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>"
    await message.answer(welcome_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


@user_router.callback_query()
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    callback_data = callback_query.data
    if callback_data.startswith('admin_'):
        logger.info(f"Admin callback received, skipping user handler: {callback_data}")
        return
    if callback_data == 'stars_category_back':
        await show_categories(callback_query, 'stars')
        return
    if callback_data == 'operator_categories':
        await show_categories(callback_query, 'operator')
        return
    if callback_data == 'stars_categories':
        await show_categories(callback_query, 'stars')
        return
    if callback_data.startswith('buy_with_stars_'):
        product_id = int(callback_data.split('_')[3])
        await process_stars_payment(callback_query, product_id)
        return
    if callback_data.startswith('operator_category_'):
        category_id = int(callback_data.split('_')[2])
        await show_products(callback_query, category_id, 'operator')
        return
    if callback_data.startswith('stars_category_'):
        category_id = int(callback_data.split('_')[2])
        await show_products(callback_query, category_id, 'stars')
        return
    if callback_data.startswith('operator_product_'):
        product_id = int(callback_data.split('_')[2])
        await show_product_details(callback_query, product_id, 'operator')
        return
    if callback_data.startswith('stars_product_'):
        product_id = int(callback_data.split('_')[2])
        await show_product_details(callback_query, product_id, 'stars')
        return
    if callback_data in ['about_shop', 'promotions']:
        content = db.get_section_content(callback_data)
        photo_path = db.get_section_photo(callback_data)
        if content:
            if photo_path:
                try:
                    await callback_query.message.answer_photo(
                        FSInputFile(photo_path),
                        caption=content,
                        parse_mode=ParseMode.HTML,
                        reply_markup=create_back_button()
                    )
                    await callback_query.message.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    await callback_query.message.answer(
                        content,
                        parse_mode=ParseMode.HTML,
                        reply_markup=create_back_button()
                    )
            else:
                await callback_query.message.answer(
                    content,
                    parse_mode=ParseMode.HTML,
                    reply_markup=create_back_button()
                )
            await callback_query.answer()
            return
    if callback_data == 'support':
        text = """
üõü <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @sssofbot13
        """
        reply_markup = create_back_button()
    elif callback_data == 'back_to_main':
        text = "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:</b>"
        reply_markup = create_main_menu_keyboard()
        try:
            await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        except:
            await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        await callback_query.answer()
        return
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        reply_markup = create_back_button()

    try:
        await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    except:
        try:
            await callback_query.message.delete()
        except:
            pass
        await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    await callback_query.answer()


async def show_categories(callback_query: types.CallbackQuery, section_type: str):
    categories = db.get_categories_by_section(section_type)
    section_name = "–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" if section_type == 'operator' else "–ü–æ–∫—É–ø–∫–∞ –∑–∞ –∑–≤–µ–∑–¥—ã"
    if not categories:
        text = f"üì¶ <b>{section_name}</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
        reply_markup = create_back_button()
        try:
            await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        except:
            await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    else:
        text = f"üì¶ <b>{section_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        keyboard = InlineKeyboardBuilder()
        for category in categories:
            products_count = len(db.get_products_by_category_and_section(category['id'], section_type))
            keyboard.button(text=f"{category['name']} ({products_count} —Ç–æ–≤–∞—Ä–æ–≤)",
                            callback_data=f"{section_type}_category_{category['id']}")
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard.adjust(1)
        try:
            await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.as_markup())
        except:
            await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.as_markup())
    await callback_query.answer()


async def show_products(callback_query: types.CallbackQuery, category_id: int, section_type: str):
    category = db.get_category_by_id(category_id)
    section_name = "–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" if section_type == 'operator' else "–ü–æ–∫—É–ø–∫–∞ –∑–∞ –∑–≤–µ–∑–¥—ã"
    if category:
        products = db.get_products_by_category_and_section(category_id, section_type)
        if not products:
            text = f"üì¶ <b>{category['name']}</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"{section_type}_categories")
            try:
                await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML,
                                                       reply_markup=keyboard.as_markup())
            except:
                await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.as_markup())
        else:
            text = f"üì¶ <b>{category['name']}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
            keyboard = InlineKeyboardBuilder()
            for product in products:
                if section_type == 'operator':
                    keyboard.button(text=f"{product['name']} - {product['price']} —Ä—É–±.",
                                    callback_data=f"{section_type}_product_{product['id']}")
                else:
                    keyboard.button(text=f"{product['name']} - {product['stars_price']} –∑–≤—ë–∑–¥",
                                    callback_data=f"{section_type}_product_{product['id']}")
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"{section_type}_categories")
            keyboard.adjust(1)
            try:
                await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML,
                                                       reply_markup=keyboard.as_markup())
            except:
                await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.as_markup())
    else:
        await callback_query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await callback_query.answer()


async def show_product_details(callback_query: types.CallbackQuery, product_id: int, section_type: str):
    product = db.get_product_by_id(product_id)
    if product:
        category = db.get_category_by_id(product['category_id'])
        if section_type == 'operator':
            text = f"üõí <b>{product['name']}</b>\n\n{product['description']}\n\nüíµ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name'] if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\nüì∏ <b>–î–ª—è –ø–æ–∫—É–ø–∫–∏:</b>\n1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ @sssofbot13"
            reply_markup = create_back_to_products_button(product['category_id'], section_type)
        else:
            text = f"‚≠ê <b>{product['name']}</b>\n\n{product['description']}\n\nüí´ –¶–µ–Ω–∞: {product['stars_price']} –∑–≤—ë–∑–¥\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name'] if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            reply_markup = create_stars_payment_keyboard(product_id)
        try:
            await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        except:
            await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    else:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback_query.answer()


async def process_stars_payment(callback_query: types.CallbackQuery, product_id: int):
    product = db.get_product_by_id(product_id)
    user_id = callback_query.from_user.id
    if not product or product['stars_price'] <= 0:
        await callback_query.answer("‚ùå –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –∑–∞ –∑–≤–µ–∑–¥—ã.")
        return
    payload = str(uuid.uuid4())
    payment_id = db.create_star_payment(user_id=user_id, product_id=product_id, amount=product['stars_price'],
                                        payload=payload)
    if not payment_id:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    prices = [LabeledPrice(label=product['name'], amount=product['stars_price'])]

    try:
        await bot.send_invoice(
            chat_id=callback_query.message.chat.id,
            title=product['name'],
            description=f"–û–ø–ª–∞—Ç–∞ {product['stars_price']} –∑–≤—ë–∑–¥",
            payload=payload,
            provider_token="",
            currency="XTR",
            prices=prices,
            start_parameter="create_invoice_stars",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        db.update_star_payment_status(payment_id, "failed")

    await callback_query.answer()


@user_router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    try:
        payment = db.get_star_payment_by_payload(pre_checkout_query.invoice_payload)
        if not payment:
            await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False, error_message="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        product = db.get_product_by_id(payment['product_id'])
        if not product or product['stars_price'] <= 0:
            await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                                error_message="–¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ pre-checkout –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")


@user_router.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    try:
        successful_payment = message.successful_payment
        user_id = message.from_user.id

        payment = db.get_star_payment_by_payload(successful_payment.invoice_payload)
        if not payment:
            logger.error(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è payload: {successful_payment.invoice_payload}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        db.update_star_payment_status(
            payment_id=payment['id'],
            status="completed",
            telegram_payment_charge_id=successful_payment.telegram_payment_charge_id,
            provider_payment_charge_id=successful_payment.provider_payment_charge_id
        )

        product = db.get_product_by_id(payment['product_id'])
        if not product:
            logger.error(f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è payment: {payment}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        success_text = f"""
üéâ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: <b>{product['name']}</b>
–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{successful_payment.total_amount} –∑–≤—ë–∑–¥</b>
"""
        await message.answer(success_text, parse_mode=ParseMode.HTML)

        if product.get('activation_instruction'):
            instruction_text = f"""
üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>
{product['activation_instruction']}

üí´ <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</i>
"""
            await message.answer(instruction_text, parse_mode=ParseMode.HTML)
        else:
            await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @sssofbot13")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


@user_router.message()
async def handle_text(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É üëá",
                         reply_markup=create_main_menu_keyboard())


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
