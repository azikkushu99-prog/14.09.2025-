import logging
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile

from db import db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

SECTION_FOLDERS = {
    "about_shop": "Photo2",
    "promotions": "Photo3"
}

for folder in SECTION_FOLDERS.values():
    os.makedirs(folder, exist_ok=True)


class AdminStates(StatesGroup):
    ADD_CATEGORY_NAME = State()
    ADD_CATEGORY_SECTION = State()
    ADD_PRODUCT_NAME = State()
    ADD_PRODUCT_PRICE = State()
    ADD_PRODUCT_SBP_PRICE = State()
    ADD_PRODUCT_DESCRIPTION = State()
    ADD_PRODUCT_SECTION = State()
    EDIT_SECTION_TEXT = State()
    EDIT_SECTION_PHOTO = State()


admin_router = Router()


def create_back_to_admin_menu_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
    return keyboard.as_markup()


def create_cancel_edit_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_cancel_edit")
    return keyboard.as_markup()


def create_photo_edit_keyboard(has_photo: bool = False):
    keyboard = InlineKeyboardBuilder()

    if has_photo:
        keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="admin_delete_photo")

    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ", callback_data="admin_skip_photo")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_cancel_edit")
    keyboard.adjust(1)
    return keyboard


def create_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    buttons = [
        ("üì¶ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "operator_categories"),
        ("üí≥ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –°–ë–ü", "sbp_categories"),
        ("üì¶ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", "about_shop"),
        ("üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support"),
        ("üéÅ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏", "promotions")
    ]
    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)
    builder.adjust(2)
    return builder.as_markup()


def create_close_request_keyboard(order_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"close_request_{order_id}")
    return builder.as_markup()


def create_skip_description_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üö´ –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_skip_description")
    keyboard.adjust(1)
    return keyboard.as_markup()


def setup_admin_router(dp: Dispatcher):
    dp.include_router(admin_router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    admin_router.callback_query.register(cancel_edit_handler, F.data == "admin_cancel_edit")
    admin_router.callback_query.register(skip_photo_handler, F.data == "admin_skip_photo")
    admin_router.callback_query.register(delete_photo_handler, F.data == "admin_delete_photo")
    admin_router.callback_query.register(skip_description_handler, F.data == "admin_skip_description")
    admin_router.callback_query.register(add_product_category_handler, F.data.startswith("admin_add_product_category_"))
    admin_router.callback_query.register(delete_category_handler, F.data.startswith("admin_delete_category_"))
    admin_router.callback_query.register(manage_products_handler, F.data.startswith("admin_manage_products_"))
    admin_router.callback_query.register(delete_product_handler, F.data.startswith("admin_delete_product_"))
    admin_router.callback_query.register(add_product_section_handler, F.data.startswith("admin_product_section_"))
    admin_router.callback_query.register(add_category_section_handler, F.data.startswith("admin_section_"))
    admin_router.callback_query.register(admin_callback_handler, F.data.startswith("admin_"))
    admin_router.callback_query.register(show_closed_orders_handler, F.data == "admin_closed_orders")

    admin_router.message.register(admin_command, Command("admin"))
    admin_router.message.register(add_category_name_handler, AdminStates.ADD_CATEGORY_NAME)
    admin_router.message.register(add_product_name_handler, AdminStates.ADD_PRODUCT_NAME)
    admin_router.message.register(add_product_price_handler, AdminStates.ADD_PRODUCT_PRICE)
    admin_router.message.register(add_product_sbp_price_handler, AdminStates.ADD_PRODUCT_SBP_PRICE)
    admin_router.message.register(add_product_description_handler, AdminStates.ADD_PRODUCT_DESCRIPTION)
    admin_router.message.register(edit_section_text_handler, AdminStates.EDIT_SECTION_TEXT)
    admin_router.message.register(edit_section_photo_handler, AdminStates.EDIT_SECTION_PHOTO)


async def admin_command(message: types.Message):
    if not db.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await show_admin_menu(message)


async def show_admin_menu(message: types.Message = None, callback_query: types.CallbackQuery = None):
    text = """
üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üì¶ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤'", callback_data="admin_edit_about_shop")
    keyboard.button(text="üéÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏'", callback_data="admin_edit_promotions")
    keyboard.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")
    keyboard.button(text="üõí –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")
    keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="admin_manage_categories")
    keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_manage_products")
    keyboard.button(text="üìÑ –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_pending_orders")
    keyboard.button(text="üìÇ –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_closed_orders")
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back_to_main")
    keyboard.adjust(1)

    if message:
        await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.as_markup())
    elif callback_query:
        await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.as_markup())
        await callback_query.answer()


async def admin_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    if not db.is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    action = callback_query.data

    if action == "admin_back_to_main":
        await callback_query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=create_main_menu_keyboard()
        )

    elif action == "admin_back":
        await state.clear()
        await show_admin_menu(callback_query=callback_query)

    elif action.startswith("admin_edit_"):
        section = action.replace("admin_edit_", "")
        await state.update_data(editing_section=section)
        await state.set_state(AdminStates.EDIT_SECTION_TEXT)

        content = db.get_section_content(section)
        section_name = "–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤" if section == "about_shop" else "–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏"
        await callback_query.message.edit_text(
            f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ '{section_name}'</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{content}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
            parse_mode=ParseMode.HTML,
            reply_markup=create_cancel_edit_keyboard()
        )

    elif action == "admin_add_category":
        await start_add_category(callback_query, state)

    elif action == "admin_add_product":
        await start_add_product(callback_query, state)

    elif action == "admin_manage_categories":
        await show_categories_management(callback_query)

    elif action == "admin_manage_products":
        await show_products_management(callback_query)

    elif action == "admin_pending_orders":
        await show_pending_orders(callback_query)

    elif action == "admin_closed_orders":
        await show_closed_orders_handler(callback_query)

    await callback_query.answer()


async def show_pending_orders(callback_query: types.CallbackQuery):
    orders = db.get_orders_by_status('pending')

    if not orders:
        await callback_query.message.edit_text(
            "üìÑ <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.",
            parse_mode=ParseMode.HTML,
            reply_markup=create_back_to_admin_menu_keyboard()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for order in orders:
        product = db.get_product_by_id(order['product_id'])
        category = db.get_category_by_id(product['category_id']) if product else None
        category_name = category['name'] if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        caption = (
            f"üìÑ <b>–ó–∞—è–≤–∫–∞ #{order['id']}</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['username']}\n"  # –£–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
            f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"üõí –¢–æ–≤–∞—Ä: {product['name'] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üíµ –°—É–º–º–∞: {order['amount']} —Ä—É–±.\n"
            f"üïí –í—Ä–µ–º—è: {order['created_at']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if order['photo_path'] and os.path.exists(order['photo_path']):
            await callback_query.message.answer_photo(
                photo=FSInputFile(order['photo_path']),
                caption=caption,
                parse_mode=ParseMode.HTML,
                reply_markup=create_close_request_keyboard(order['id'])
            )
        else:
            await callback_query.message.answer(
                caption,
                parse_mode=ParseMode.HTML,
                reply_markup=create_close_request_keyboard(order['id'])
            )

    await callback_query.answer("–í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


async def show_closed_orders_handler(callback_query: types.CallbackQuery):
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
    deleted_count = delete_old_closed_orders(7)

    orders = db.get_orders_by_status('closed')

    if not orders:
        await callback_query.message.edit_text(
            "üìÇ <b>–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.",
            parse_mode=ParseMode.HTML,
            reply_markup=create_back_to_admin_menu_keyboard()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    if deleted_count > 0:
        await callback_query.message.answer(
            f"üóëÔ∏è <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫</b>",
            parse_mode=ParseMode.HTML
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞—è–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ñ–æ—Ç–æ
    for order in orders:
        product = db.get_product_by_id(order['product_id'])
        category = db.get_category_by_id(product['category_id']) if product else None
        category_name = category['name'] if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        caption = (
            f"üîí <b>–ó–∞–∫—Ä—ã—Ç–∞—è –∑–∞—è–≤–∫–∞ #{order['id']}</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['username']}\n"  # –£–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
            f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"üõí –¢–æ–≤–∞—Ä: {product['name'] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üíµ –°—É–º–º–∞: {order['amount']} —Ä—É–±.\n"
            f"üïí –í—Ä–µ–º—è: {order['created_at']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if order['photo_path'] and os.path.exists(order['photo_path']):
            await callback_query.message.answer_photo(
                photo=FSInputFile(order['photo_path']),
                caption=caption,
                parse_mode=ParseMode.HTML
            )
        else:
            await callback_query.message.answer(
                caption,
                parse_mode=ParseMode.HTML
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–æ–Ω—Ü–µ
    await callback_query.message.answer(
        "üìÇ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=create_back_to_admin_menu_keyboard()
    )

    await callback_query.answer("–í—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


def delete_old_closed_orders(days: int):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    closed_orders = db.get_orders_by_status('closed')
    deleted_count = 0
    cutoff_date = datetime.now() - timedelta(days=days)

    for order in closed_orders:
        order_date = datetime.strptime(order['created_at'], '%Y-%m-%d %H:%M:%S')
        if order_date < cutoff_date:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á–µ–∫–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if order['photo_path'] and os.path.exists(order['photo_path']):
                try:
                    os.remove(order['photo_path'])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —á–µ–∫–∞: {e}")

            # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if db.delete_order(order['id']):
                deleted_count += 1

    return deleted_count


async def cancel_edit_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await show_admin_menu(callback_query=callback_query)
    await callback_query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


async def delete_photo_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    section = user_data.get('editing_section')

    if not section:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ
    current_photo_path = db.get_section_photo(section)

    # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    if current_photo_path and os.path.exists(current_photo_path):
        try:
            os.remove(current_photo_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.update_section_photo(section, None)

    await callback_query.message.edit_text(
        "‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ! –¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.",
        reply_markup=create_back_to_admin_menu_keyboard()
    )
    await state.clear()
    await callback_query.answer()


async def edit_section_text_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    section = user_data.get('editing_section')

    if not section:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        await state.clear()
        return

    await state.update_data(new_content=message.text)
    await state.set_state(AdminStates.EDIT_SECTION_PHOTO)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
    current_photo_path = db.get_section_photo(section)
    has_photo = current_photo_path is not None and os.path.exists(current_photo_path)

    await message.answer(
        "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_photo_edit_keyboard(has_photo).as_markup()
    )


async def edit_section_photo_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    section = user_data.get('editing_section')
    new_content = user_data.get('new_content')

    if not section or not new_content:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    db.update_section_content(section, new_content)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    old_photo_path = db.get_section_photo(section)
    if old_photo_path and os.path.exists(old_photo_path):
        try:
            os.remove(old_photo_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ç–æ: {e}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if message.photo:
        photo = message.photo[-1]
        photo_file = await message.bot.get_file(photo.file_id)
        photo_path = f"{SECTION_FOLDERS[section]}/{photo.file_id}.jpg"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        await message.bot.download_file(photo_file.file_path, photo_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ –ë–î
        db.update_section_photo(section, photo_path)

        section_name = "–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤" if section == "about_shop" else "–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏"
        await message.answer(
            f"‚úÖ –†–∞–∑–¥–µ–ª '{section_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–æ—Ç–æ!",
            reply_markup=create_back_to_admin_menu_keyboard()
        )
    else:
        section_name = "–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤" if section == "about_shop" else "–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏"
        await message.answer(
            f"‚úÖ –†–∞–∑–¥–µ–ª '{section_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–∞–º!",
            reply_markup=create_back_to_admin_menu_keyboard()
        )

    await state.clear()


async def skip_photo_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    section = user_data.get('editing_section')
    new_content = user_data.get('new_content')

    if not section or not new_content:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    db.update_section_content(section, new_content)

    section_name = "–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤" if section == "about_shop" else "–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏"
    await callback_query.message.edit_text(
        f"‚úÖ –†–∞–∑–¥–µ–ª '{section_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–∞–º!",
        reply_markup=create_back_to_admin_menu_keyboard()
    )

    await state.clear()
    await callback_query.answer()


async def start_add_category(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        parse_mode=ParseMode.HTML,
        reply_markup=create_back_to_admin_menu_keyboard()
    )
    await state.set_state(AdminStates.ADD_CATEGORY_NAME)


async def add_category_name_handler(message: types.Message, state: FSMContext):
    category_name = message.text
    await state.update_data(category_name=category_name)

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üì¶ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_section_operator")
    keyboard.button(text="üí≥ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –°–ë–ü", callback_data="admin_section_sbp")
    keyboard.adjust(1)

    await message.answer(
        "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(AdminStates.ADD_CATEGORY_SECTION)


async def add_category_section_handler(callback_query: types.CallbackQuery, state: FSMContext):
    section = callback_query.data.replace("admin_section_", "")
    user_data = await state.get_data()
    category_name = user_data.get('category_name')

    section_name = "–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" if section == "operator" else "–°–ë–ü"

    if db.add_category(category_name, None, None, section):
        await callback_query.message.edit_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª '{section_name}'!",
            reply_markup=create_back_to_admin_menu_keyboard()
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=create_back_to_admin_menu_keyboard()
        )

    await state.clear()
    await callback_query.answer()


async def start_add_product(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üì¶ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_product_section_operator")
    keyboard.button(text="üí≥ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –°–ë–ü", callback_data="admin_product_section_sbp")
    keyboard.adjust(1)

    await callback_query.message.edit_text(
        "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ç–æ–≤–∞—Ä–∞:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(AdminStates.ADD_PRODUCT_SECTION)


async def add_product_section_handler(callback_query: types.CallbackQuery, state: FSMContext):
    section = callback_query.data.replace("admin_product_section_", "")
    await state.update_data(product_section=section)

    # –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    categories = db.get_categories_by_section(section)

    if not categories:
        await callback_query.message.edit_text(
            f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ä–∞–∑–¥–µ–ª {'–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞' if section == 'operator' else '–°–ë–ü'}.",
            reply_markup=create_back_to_admin_menu_keyboard()
        )
        await callback_query.answer()
        return

    keyboard = InlineKeyboardBuilder()
    for category in categories:
        keyboard.button(text=category['name'], callback_data=f"admin_add_product_category_{category['id']}")

    keyboard.button(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    keyboard.adjust(1)

    await callback_query.message.edit_text(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard.as_markup()
    )
    await callback_query.answer()


async def add_product_category_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º category_id –∏–∑ callback_data
        callback_data = callback_query.data
        logger.info(f"Received callback data: {callback_data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        category_id = int(callback_data.replace("admin_add_product_category_", ""))
        logger.info(f"Extracted category ID: {category_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º category_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(product_category_id=category_id)

        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback_query.answer()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        await callback_query.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=create_back_to_admin_menu_keyboard()
        )
        await state.set_state(AdminStates.ADD_PRODUCT_NAME)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=create_back_to_admin_menu_keyboard()
        )


async def add_product_name_handler(message: types.Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    user_data = await state.get_data()
    section = user_data.get('product_section')

    if section == "sbp":
        await message.answer(
            "üí≥ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü:",
            reply_markup=create_back_to_admin_menu_keyboard()
        )
        await state.set_state(AdminStates.ADD_PRODUCT_SBP_PRICE)
    else:
        await message.answer(
            "üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=create_back_to_admin_menu_keyboard()
        )
        await state.set_state(AdminStates.ADD_PRODUCT_PRICE)


async def add_product_price_handler(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(product_price=price)

        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=create_skip_description_keyboard()
        )
        await state.set_state(AdminStates.ADD_PRODUCT_DESCRIPTION)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=create_back_to_admin_menu_keyboard()
        )


async def add_product_sbp_price_handler(message: types.Message, state: FSMContext):
    try:
        sbp_price = int(message.text)
        await state.update_data(product_stars_price=sbp_price)

        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=create_skip_description_keyboard()
        )
        await state.set_state(AdminStates.ADD_PRODUCT_DESCRIPTION)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=create_back_to_admin_menu_keyboard()
        )


async def add_product_description_handler(message: types.Message, state: FSMContext):
    description = message.text
    await process_product_description(message, state, description)


async def skip_description_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await process_product_description(callback_query, state, "")


async def process_product_description(message_or_callback, state: FSMContext, description: str):
    user_data = await state.get_data()

    name = user_data.get('product_name')
    category_id = user_data.get('product_category_id')
    section = user_data.get('product_section')

    if section == "operator":
        price = user_data.get('product_price', 0)
        stars_price = 0
    else:
        price = 0
        stars_price = user_data.get('product_stars_price', 0)

    if db.add_product(name, description, price, stars_price, category_id, None, section):
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(
                f"‚úÖ –¢–æ–≤–∞—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=create_back_to_admin_menu_keyboard()
            )
        else:
            await message_or_callback.message.edit_text(
                f"‚úÖ –¢–æ–≤–∞—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=create_back_to_admin_menu_keyboard()
            )
    else:
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=create_back_to_admin_menu_keyboard()
            )
        else:
            await message_or_callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=create_back_to_admin_menu_keyboard()
            )

    await state.clear()


async def show_categories_management(callback_query: types.CallbackQuery):
    categories = db.get_all_categories()

    if not categories:
        await callback_query.message.edit_text(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
            parse_mode=ParseMode.HTML,
            reply_markup=create_back_to_admin_menu_keyboard()
        )
        return

    text = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    keyboard = InlineKeyboardBuilder()

    for category in categories:
        products_count = len(db.get_products_by_category(category['id']))
        section_name = "–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" if category['section'] == 'operator' else "–°–ë–ü"
        text += f"‚Ä¢ {category['name']} (—Ä–∞–∑–¥–µ–ª: {section_name}, {products_count} —Ç–æ–≤–∞—Ä–æ–≤)\n"
        keyboard.button(text=f"üóëÔ∏è {category['name']}", callback_data=f"admin_delete_category_{category['id']}")

    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    keyboard.adjust(1)

    await callback_query.message.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard.as_markup()
    )


async def delete_category_handler(callback_query: types.CallbackQuery):
    category_id = int(callback_query.data.split('_')[3])
    category = db.get_category_by_id(category_id)

    if category:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products = db.get_products_by_category(category_id)
        for product in products:
            db.delete_product(product['id'])

        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if db.delete_category(category_id):
            await callback_query.message.edit_text(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category['name']}' –∏ –≤—Å–µ –µ—ë —Ç–æ–≤–∞—Ä—ã ({len(products)} —à—Ç.) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
                reply_markup=create_back_to_admin_menu_keyboard()
            )
        else:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                reply_markup=create_back_to_admin_menu_keyboard()
            )
    else:
        await callback_query.message.edit_text(
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=create_back_to_admin_menu_keyboard()
        )

    await callback_query.answer()


async def show_products_management(callback_query: types.CallbackQuery):
    categories = db.get_all_categories()

    if not categories:
        await callback_query.message.edit_text(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
            parse_mode=ParseMode.HTML,
            reply_markup=create_back_to_admin_menu_keyboard()
        )
        return

    text = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏:\n\n"
    keyboard = InlineKeyboardBuilder()

    for category in categories:
        products = db.get_products_by_category(category['id'])
        section_name = "–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" if category['section'] == 'operator' else "–°–ë–ü"
        text += f"üì¶ {category['name']} (—Ä–∞–∑–¥–µ–ª: {section_name}, {len(products)} —Ç–æ–≤–∞—Ä–æ–≤)\n"
        keyboard.button(text=f"üìã {category['name']}", callback_data=f"admin_manage_products_{category['id']}")

    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    keyboard.adjust(1)

    await callback_query.message.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard.as_markup()
    )


async def manage_products_handler(callback_query: types.CallbackQuery):
    category_id = int(callback_query.data.split('_')[3])
    category = db.get_category_by_id(category_id)
    products = db.get_products_by_category(category_id)

    if not products:
        await callback_query.message.edit_text(
            f"üóëÔ∏è <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category['name']}</b>\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            parse_mode=ParseMode.HTML,
            reply_markup=create_back_to_admin_menu_keyboard()
        )
        return

    text = f"üóëÔ∏è <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category['name']}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    keyboard = InlineKeyboardBuilder()

    for product in products:
        if product['section'] == 'operator':
            text += f"‚Ä¢ {product['name']} - {product['price']} —Ä—É–±.\n"
        else:
            text += f"‚Ä¢ {product['name']} - {product['stars_price']} —Ä—É–±.\n"

        keyboard.button(text=f"üóëÔ∏è {product['name']}", callback_data=f"admin_delete_product_{product['id']}")

    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_products")
    keyboard.adjust(1)

    await callback_query.message.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard.as_markup()
    )


async def delete_product_handler(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[3])
    product = db.get_product_by_id(product_id)

    if product:
        if db.delete_product(product_id):
            await callback_query.message.edit_text(
                f"‚úÖ –¢–æ–≤–∞—Ä '{product['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=create_back_to_admin_menu_keyboard()
            )
        else:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.",
                reply_markup=create_back_to_admin_menu_keyboard()
            )
    else:
        await callback_query.message.edit_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=create_back_to_admin_menu_keyboard()
        )

    await callback_query.answer()
